// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ergodic_sim
arma::mat ergodic_sim(int agents, int rounds, int money, double win, double loss, double prob);
RcppExport SEXP _misccpp_ergodic_sim(SEXP agentsSEXP, SEXP roundsSEXP, SEXP moneySEXP, SEXP winSEXP, SEXP lossSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type agents(agentsSEXP);
    Rcpp::traits::input_parameter< int >::type rounds(roundsSEXP);
    Rcpp::traits::input_parameter< int >::type money(moneySEXP);
    Rcpp::traits::input_parameter< double >::type win(winSEXP);
    Rcpp::traits::input_parameter< double >::type loss(lossSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(ergodic_sim(agents, rounds, money, win, loss, prob));
    return rcpp_result_gen;
END_RCPP
}
// lt_gibbs_cpp
Rcpp::List lt_gibbs_cpp(std::vector<std::vector<int>> links_list, std::vector<int> wave, std::vector<int> name, arma::mat y_samp, std::vector<int> strata, int n_strata, int n_waves, int total, int chain_samples, int chain_burnin, int prior_n, std::vector<double> prior_l, int prior_b, int n_0, std::vector<double> l_0, arma::mat b_0, int n_samples);
RcppExport SEXP _misccpp_lt_gibbs_cpp(SEXP links_listSEXP, SEXP waveSEXP, SEXP nameSEXP, SEXP y_sampSEXP, SEXP strataSEXP, SEXP n_strataSEXP, SEXP n_wavesSEXP, SEXP totalSEXP, SEXP chain_samplesSEXP, SEXP chain_burninSEXP, SEXP prior_nSEXP, SEXP prior_lSEXP, SEXP prior_bSEXP, SEXP n_0SEXP, SEXP l_0SEXP, SEXP b_0SEXP, SEXP n_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type links_list(links_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type wave(waveSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type name(nameSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y_samp(y_sampSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< int >::type n_strata(n_strataSEXP);
    Rcpp::traits::input_parameter< int >::type n_waves(n_wavesSEXP);
    Rcpp::traits::input_parameter< int >::type total(totalSEXP);
    Rcpp::traits::input_parameter< int >::type chain_samples(chain_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type chain_burnin(chain_burninSEXP);
    Rcpp::traits::input_parameter< int >::type prior_n(prior_nSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type prior_l(prior_lSEXP);
    Rcpp::traits::input_parameter< int >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< int >::type n_0(n_0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type l_0(l_0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b_0(b_0SEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(lt_gibbs_cpp(links_list, wave, name, y_samp, strata, n_strata, n_waves, total, chain_samples, chain_burnin, prior_n, prior_l, prior_b, n_0, l_0, b_0, n_samples));
    return rcpp_result_gen;
END_RCPP
}
// add_par
int add_par(int n, int ncores);
RcppExport SEXP _misccpp_add_par(SEXP nSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(add_par(n, ncores));
    return rcpp_result_gen;
END_RCPP
}
// add_seq
int add_seq(int n);
RcppExport SEXP _misccpp_add_seq(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(add_seq(n));
    return rcpp_result_gen;
END_RCPP
}
// write_vec_par
std::vector<int> write_vec_par(std::vector<int> x, int y, int ncores);
RcppExport SEXP _misccpp_write_vec_par(SEXP xSEXP, SEXP ySEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(write_vec_par(x, y, ncores));
    return rcpp_result_gen;
END_RCPP
}
// pareto_sim
std::vector<std::vector<int>> pareto_sim(int pop_size, std::vector<int> mon, std::vector<double> prop, int iter);
RcppExport SEXP _misccpp_pareto_sim(SEXP pop_sizeSEXP, SEXP monSEXP, SEXP propSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pop_size(pop_sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type mon(monSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type prop(propSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(pareto_sim(pop_size, mon, prop, iter));
    return rcpp_result_gen;
END_RCPP
}
// assign_cluster
std::vector<int> assign_cluster(arma::mat points, arma::mat centroids);
RcppExport SEXP _misccpp_assign_cluster(SEXP pointsSEXP, SEXP centroidsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type centroids(centroidsSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_cluster(points, centroids));
    return rcpp_result_gen;
END_RCPP
}
// new_centroid
arma::mat new_centroid(arma::mat points, std::vector<int> assigned_cluster, arma::mat centroids);
RcppExport SEXP _misccpp_new_centroid(SEXP pointsSEXP, SEXP assigned_clusterSEXP, SEXP centroidsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type assigned_cluster(assigned_clusterSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type centroids(centroidsSEXP);
    rcpp_result_gen = Rcpp::wrap(new_centroid(points, assigned_cluster, centroids));
    return rcpp_result_gen;
END_RCPP
}
// kmean
List kmean(arma::mat points, arma::mat centroids, int max_iter);
RcppExport SEXP _misccpp_kmean(SEXP pointsSEXP, SEXP centroidsSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type centroids(centroidsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(kmean(points, centroids, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_misccpp_ergodic_sim", (DL_FUNC) &_misccpp_ergodic_sim, 6},
    {"_misccpp_lt_gibbs_cpp", (DL_FUNC) &_misccpp_lt_gibbs_cpp, 17},
    {"_misccpp_add_par", (DL_FUNC) &_misccpp_add_par, 2},
    {"_misccpp_add_seq", (DL_FUNC) &_misccpp_add_seq, 1},
    {"_misccpp_write_vec_par", (DL_FUNC) &_misccpp_write_vec_par, 3},
    {"_misccpp_pareto_sim", (DL_FUNC) &_misccpp_pareto_sim, 4},
    {"_misccpp_assign_cluster", (DL_FUNC) &_misccpp_assign_cluster, 2},
    {"_misccpp_new_centroid", (DL_FUNC) &_misccpp_new_centroid, 3},
    {"_misccpp_kmean", (DL_FUNC) &_misccpp_kmean, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_misccpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
